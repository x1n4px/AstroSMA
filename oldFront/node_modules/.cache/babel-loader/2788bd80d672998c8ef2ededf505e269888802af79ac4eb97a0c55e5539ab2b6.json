{"ast":null,"code":"var _jsxFileName = \"/home/in4p/git/AstroUMA/Frontend/src/components/chart/StationMapChart.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapChart = ({\n  data,\n  activePopUp,\n  lat = 36.7213,\n  lon = -4.4216,\n  zoom = 11\n}) => {\n  _s();\n  const navigate = useNavigate();\n\n  // Función para determinar el color del marcador según el estado\n  const getMarkerColor = state => {\n    switch (state) {\n      case 0:\n        return '/map-green.png';\n      // Verde para state = 0\n      case 1:\n        return '/map-yellow.png';\n      // Rojo para state = 1\n      case 2:\n        return '/map-blue.png';\n      // Azul para state = 2\n      default:\n        return 'gray';\n      // Color por defecto\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [lat, lon],\n    zoom: [zoom],\n    style: {\n      width: '100%',\n      height: '800px'\n    },\n    scrollWheelZoom: false,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), data.map((punto, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [punto.lat, punto.lon],\n      icon: new L.Icon({\n        iconUrl: `${getMarkerColor(punto.state)}`,\n        iconSize: [25, 25],\n        iconColor: getMarkerColor(punto.state) // Cambiar el color del icono según el estado\n      }),\n      children: activePopUp && /*#__PURE__*/_jsxDEV(Popup, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: punto.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [punto.lat, \", \", punto.lon]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(MapChart, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["useNavigate","React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","MapChart","data","activePopUp","lat","lon","zoom","_s","navigate","getMarkerColor","state","center","style","width","height","scrollWheelZoom","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","punto","index","position","icon","Icon","iconUrl","iconSize","iconColor","title","_c","$RefreshReg$"],"sources":["/home/in4p/git/AstroUMA/Frontend/src/components/chart/StationMapChart.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\n\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\n\nconst MapChart = ({ data, activePopUp, lat = 36.7213, lon = -4.4216 , zoom = 11 }) => {\n\n    const navigate = useNavigate();\n\n    // Función para determinar el color del marcador según el estado\n    const getMarkerColor = (state) => {\n        switch (state) {\n            case 0:\n                return '/map-green.png';  // Verde para state = 0\n            case 1:\n                return '/map-yellow.png';    // Rojo para state = 1\n            case 2:\n                return '/map-blue.png';   // Azul para state = 2\n            default:\n                return 'gray';   // Color por defecto\n        }\n    };\n\n    return (\n        <MapContainer center={[lat, lon]} zoom={[zoom]} style={{ width: '100%', height: '800px' }} scrollWheelZoom={false}  >\n            {/* Capa base del mapa (Mapa de OpenStreetMap) */}\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            {/* Marcadores */}\n            {data.map((punto, index) => (\n                <Marker\n                    key={index}\n                    position={[punto.lat, punto.lon]}\n                    icon={new L.Icon({\n                        iconUrl: `${getMarkerColor(punto.state)}`,\n                        iconSize: [25, 25],\n                        iconColor: getMarkerColor(punto.state)  // Cambiar el color del icono según el estado\n                    })}\n                >\n                    {activePopUp && (\n                        <Popup>\n                            <div>\n                                <p>{punto.title}</p>\n                                <p>{punto.lat}, {punto.lon}</p>\n                            </div>\n                        </Popup>\n                    )}\n                </Marker>\n            ))}\n        </MapContainer>\n    );\n}\n\nexport default MapChart;\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AACtE,OAAOC,CAAC,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,WAAW;EAAEC,GAAG,GAAG,OAAO;EAAEC,GAAG,GAAG,CAAC,MAAM;EAAGC,IAAI,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EAElF,MAAMC,QAAQ,GAAGhB,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMiB,cAAc,GAAIC,KAAK,IAAK;IAC9B,QAAQA,KAAK;MACT,KAAK,CAAC;QACF,OAAO,gBAAgB;MAAG;MAC9B,KAAK,CAAC;QACF,OAAO,iBAAiB;MAAK;MACjC,KAAK,CAAC;QACF,OAAO,eAAe;MAAI;MAC9B;QACI,OAAO,MAAM;MAAI;IACzB;EACJ,CAAC;EAED,oBACIV,OAAA,CAACN,YAAY;IAACiB,MAAM,EAAE,CAACP,GAAG,EAAEC,GAAG,CAAE;IAACC,IAAI,EAAE,CAACA,IAAI,CAAE;IAACM,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAACC,eAAe,EAAE,KAAM;IAAAC,QAAA,gBAE9GhB,OAAA,CAACL,SAAS;MACNsB,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAAyF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxG,CAAC,EAEDpB,IAAI,CAACqB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACnBzB,OAAA,CAACJ,MAAM;MAEH8B,QAAQ,EAAE,CAACF,KAAK,CAACpB,GAAG,EAAEoB,KAAK,CAACnB,GAAG,CAAE;MACjCsB,IAAI,EAAE,IAAI7B,CAAC,CAAC8B,IAAI,CAAC;QACbC,OAAO,EAAE,GAAGpB,cAAc,CAACe,KAAK,CAACd,KAAK,CAAC,EAAE;QACzCoB,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAClBC,SAAS,EAAEtB,cAAc,CAACe,KAAK,CAACd,KAAK,CAAC,CAAE;MAC5C,CAAC,CAAE;MAAAM,QAAA,EAEFb,WAAW,iBACRH,OAAA,CAACH,KAAK;QAAAmB,QAAA,eACFhB,OAAA;UAAAgB,QAAA,gBACIhB,OAAA;YAAAgB,QAAA,EAAIQ,KAAK,CAACQ;UAAK;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBtB,OAAA;YAAAgB,QAAA,GAAIQ,KAAK,CAACpB,GAAG,EAAC,IAAE,EAACoB,KAAK,CAACnB,GAAG;UAAA;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IACV,GAfIG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBN,CACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEvB,CAAC;AAAAf,EAAA,CAhDKN,QAAQ;EAAA,QAEOT,WAAW;AAAA;AAAAyC,EAAA,GAF1BhC,QAAQ;AAkDd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}