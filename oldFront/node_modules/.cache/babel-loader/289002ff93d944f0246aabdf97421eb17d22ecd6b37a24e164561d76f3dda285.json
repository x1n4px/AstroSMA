{"ast":null,"code":"var _jsxFileName = \"/home/in4p/git/AstroUMA/Frontend/src/components/chart/Pending.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst PendienteChart = ({\n  data\n}) => {\n  if (!data || data.length < 2) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Se requieren al menos dos puntos para mostrar la pendiente.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n  const distances = [0]; // Distancia inicial es 0\n  let totalDistance = 0;\n  for (let i = 1; i < data.length; i++) {\n    const distance = calculateDistance(data[i - 1].lat, data[i - 1].lon, data[i].lat, data[i].lon);\n    totalDistance += distance;\n    distances.push(totalDistance);\n  }\n  const alturas = data.map(punto => punto.height); // Alturas para el eje Y\n\n  const chartData = {\n    labels: distances.map(dist => dist.toFixed(2) + ' km'),\n    // Distancia en el eje X\n    datasets: [{\n      label: 'Altura (km)',\n      data: alturas,\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: false // No comenzar en cero en el eje Y\n      }\n    },\n    animation: {\n      duration: 1000,\n      easing: 'easeInQuad'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n};\n_c = PendienteChart;\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radio de la Tierra en kilómetros\n  const dLat = toRadians(lat2 - lat1);\n  const dLon = toRadians(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n};\nconst toRadians = degrees => {\n  return degrees * (Math.PI / 180);\n};\nexport default PendienteChart;\nvar _c;\n$RefreshReg$(_c, \"PendienteChart\");","map":{"version":3,"names":["React","Line","Chart","registerables","jsxDEV","_jsxDEV","register","PendienteChart","data","length","children","fileName","_jsxFileName","lineNumber","columnNumber","distances","totalDistance","i","distance","calculateDistance","lat","lon","push","alturas","map","punto","height","chartData","labels","dist","toFixed","datasets","label","fill","borderColor","tension","chartOptions","scales","y","beginAtZero","animation","duration","easing","options","_c","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","$RefreshReg$"],"sources":["/home/in4p/git/AstroUMA/Frontend/src/components/chart/Pending.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst PendienteChart = ({ data }) => {\n    if (!data || data.length < 2) {\n        return <p>Se requieren al menos dos puntos para mostrar la pendiente.</p>;\n    }\n\n    const distances = [0]; // Distancia inicial es 0\n    let totalDistance = 0;\n    for (let i = 1; i < data.length; i++) {\n        const distance = calculateDistance(\n            data[i - 1].lat,\n            data[i - 1].lon,\n            data[i].lat,\n            data[i].lon\n        );\n        totalDistance += distance;\n        distances.push(totalDistance);\n    }\n\n    const alturas = data.map((punto) => punto.height); // Alturas para el eje Y\n\n\n\n\n\n\n    const chartData = {\n        labels: distances.map((dist) => dist.toFixed(2) + ' km'), // Distancia en el eje X\n        datasets: [\n            {\n                label: 'Altura (km)',\n                data: alturas,\n                fill: false,\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1,\n            },\n        ],\n    };\n\n    const chartOptions = {\n        scales: {\n            y: {\n                beginAtZero: false, // No comenzar en cero en el eje Y\n               \n            },\n        },\n        animation: {\n            duration: 1000,\n            easing: 'easeInQuad',\n        },\n    };\n\n    return <Line data={chartData} options={chartOptions} />;\n};\n\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Radio de la Tierra en kilómetros\n    const dLat = toRadians(lat2 - lat1);\n    const dLon = toRadians(lon2 - lon1);\n    const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    return distance;\n};\n\nconst toRadians = (degrees) => {\n    return degrees * (Math.PI / 180);\n};\n\nexport default PendienteChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}